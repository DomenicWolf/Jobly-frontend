{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n  static async getCompanies() {\n    let res = await this.request(`companies`);\n    console.log(res.companies);\n    return res.companies;\n  }\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n  static async getJobs() {\n    let res = await this.request(`jobs`);\n    return res.jobs;\n  }\n  static async filteredCompanies(query) {\n    let res = await this.request(`companies?name=${query}`);\n    return res.companies;\n  }\n  static async filteredJobs(query) {\n    let res = await this.request(`jobs?title=${query}`);\n    return res.jobs;\n  }\n  static async register(data) {\n    let res = await this.request(`auth/register`, data, 'post');\n    this.token = res.token;\n  }\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, 'post');\n    this.token = res.token;\n    console.log(this.token);\n  }\n  static async getUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n  static async updateUser(username, data) {\n    let res = await this.request(`users/${username}`, data, 'patch');\n    return res.user;\n  }\n  static async apply(username, id) {\n    console.log(this.token);\n    let res = await this.request(`users/${username}/jobs/${id}`, null, 'post');\n    return res;\n  }\n\n  // obviously, you'll add a lot here ...\n}\n\nwindow.localStorage.getItem('token') ? JoblyApi.token = JSON.parse(window.localStorage.getItem('token')) : '';\n// for now, put token (\"testuser\" / \"password\" on class)\n// JoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n//     \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n//     \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","arguments","length","undefined","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCompanies","res","log","companies","getCompany","handle","company","getJobs","jobs","filteredCompanies","query","filteredJobs","register","login","getUser","username","user","updateUser","apply","id","window","localStorage","getItem","JSON","parse"],"sources":["/home/dom/SpringBoard/joblycap/jobly/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n  static async getCompanies(){\n    let res = await this.request(`companies`);\n    console.log(res.companies)\n    return res.companies;\n  }\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  static async getJobs(){\n    let res = await this.request(`jobs`);\n    return res.jobs;\n  }\n\n  static async filteredCompanies(query){\n    let res = await this.request(`companies?name=${query}`);\n    return res.companies;\n  }\n\n  static async filteredJobs(query){\n    let res = await this.request(`jobs?title=${query}`);\n    return res.jobs;\n  }\n\n  static async register(data){\n    let res = await this.request(`auth/register`, data,'post');\n    this.token = res.token;\n  }\n\n  static async login(data){\n    let res = await this.request(`auth/token`, data, 'post');\n    this.token = res.token\n    console.log(this.token)\n  }\n\n  static async getUser(username){\n    let res = await this.request(`users/${username}`);\n    return res.user\n  }\n\n  static async updateUser(username,data){\n    let res = await this.request(`users/${username}`,data,'patch');\n    return res.user\n  }\n\n  static async apply(username,id){\n    console.log(this.token)\n    let res = await this.request(`users/${username}/jobs/${id}`,null,'post');\n    return res;\n  }\n  \n\n  // obviously, you'll add a lot here ...\n}\n\nwindow.localStorage.getItem('token') ? JoblyApi.token = JSON.parse(window.localStorage.getItem('token')) : ''\n// for now, put token (\"testuser\" / \"password\" on class)\n// JoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n//     \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n//     \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\nexport default JoblyApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}